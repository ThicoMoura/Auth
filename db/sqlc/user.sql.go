// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const DeleteUser = `-- name: DeleteUser :one
DELETE FROM "user" WHERE "id" = $1 RETURNING id, "group", email, name, pass, active
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, DeleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Group,
		&i.Email,
		&i.Name,
		&i.Pass,
		&i.Active,
	)
	return &i, err
}

const GetUser = `-- name: GetUser :one
SELECT id, "group", email, name, pass, active FROM "user" WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, GetUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Group,
		&i.Email,
		&i.Name,
		&i.Pass,
		&i.Active,
	)
	return &i, err
}

const GetUserByCPF = `-- name: GetUserByCPF :one
SELECT id, "group", email, name, pass, active FROM "user" WHERE "email" = $1 LIMIT 1
`

func (q *Queries) GetUserByCPF(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, GetUserByCPF, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Group,
		&i.Email,
		&i.Name,
		&i.Pass,
		&i.Active,
	)
	return &i, err
}

const GetUserByGroup = `-- name: GetUserByGroup :many
SELECT id, "group", email, name, pass, active FROM  "user" WHERE "group" = $1 ORDER BY "name"
`

func (q *Queries) GetUserByGroup(ctx context.Context, group uuid.UUID) ([]*User, error) {
	rows, err := q.db.Query(ctx, GetUserByGroup, group)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Group,
			&i.Email,
			&i.Name,
			&i.Pass,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserByGroupPage = `-- name: GetUserByGroupPage :many
SELECT id, "group", email, name, pass, active FROM  "user" WHERE "group" = $1 ORDER BY "name" LIMIT $2 OFFSET $3
`

type GetUserByGroupPageParams struct {
	Group  uuid.UUID `db:"group" json:"group"`
	Limit  int32     `db:"limit" json:"limit"`
	Offset int32     `db:"offset" json:"offset"`
}

func (q *Queries) GetUserByGroupPage(ctx context.Context, arg *GetUserByGroupPageParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, GetUserByGroupPage, arg.Group, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Group,
			&i.Email,
			&i.Name,
			&i.Pass,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUser = `-- name: ListUser :many
SELECT id, "group", email, name, pass, active FROM "user" ORDER BY "name"
`

func (q *Queries) ListUser(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, ListUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Group,
			&i.Email,
			&i.Name,
			&i.Pass,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUserPage = `-- name: ListUserPage :many
SELECT id, "group", email, name, pass, active FROM "user" ORDER BY "name" LIMIT $1 OFFSET $2
`

type ListUserPageParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListUserPage(ctx context.Context, arg *ListUserPageParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, ListUserPage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Group,
			&i.Email,
			&i.Name,
			&i.Pass,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const NewUser = `-- name: NewUser :one
INSERT INTO "user" ("group", "email", "name", "pass") VALUES ($1, $2, $3, $4) RETURNING id, "group", email, name, pass, active
`

type NewUserParams struct {
	Group uuid.UUID `db:"group" json:"group"`
	Email string    `db:"email" json:"email"`
	Name  string    `db:"name" json:"name"`
	Pass  string    `db:"pass" json:"pass"`
}

func (q *Queries) NewUser(ctx context.Context, arg *NewUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, NewUser,
		arg.Group,
		arg.Email,
		arg.Name,
		arg.Pass,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Group,
		&i.Email,
		&i.Name,
		&i.Pass,
		&i.Active,
	)
	return &i, err
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE "user" SET "name" = $2, "active" = $3 WHERE "id" = $1 RETURNING id, "group", email, name, pass, active
`

type UpdateUserParams struct {
	ID     uuid.UUID `db:"id" json:"id"`
	Name   string    `db:"name" json:"name"`
	Active bool      `db:"active" json:"active"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, UpdateUser, arg.ID, arg.Name, arg.Active)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Group,
		&i.Email,
		&i.Name,
		&i.Pass,
		&i.Active,
	)
	return &i, err
}

const UpdateUserPass = `-- name: UpdateUserPass :one
UPDATE "user" SET "pass" = $2 WHERE "id" = $1 RETURNING id, "group", email, name, pass, active
`

type UpdateUserPassParams struct {
	ID   uuid.UUID `db:"id" json:"id"`
	Pass string    `db:"pass" json:"pass"`
}

func (q *Queries) UpdateUserPass(ctx context.Context, arg *UpdateUserPassParams) (*User, error) {
	row := q.db.QueryRow(ctx, UpdateUserPass, arg.ID, arg.Pass)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Group,
		&i.Email,
		&i.Name,
		&i.Pass,
		&i.Active,
	)
	return &i, err
}
