// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: system.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const DeleteSystem = `-- name: DeleteSystem :one
DELETE FROM "system" WHERE "id" = $1 RETURNING id, name, active
`

func (q *Queries) DeleteSystem(ctx context.Context, id uuid.UUID) (*System, error) {
	row := q.db.QueryRow(ctx, DeleteSystem, id)
	var i System
	err := row.Scan(&i.ID, &i.Name, &i.Active)
	return &i, err
}

const FindSystem = `-- name: FindSystem :many
SELECT id, name, active FROM "system" WHERE "name" LIKE $1 ORDER BY "name"
`

func (q *Queries) FindSystem(ctx context.Context, name string) ([]*System, error) {
	rows, err := q.db.Query(ctx, FindSystem, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*System{}
	for rows.Next() {
		var i System
		if err := rows.Scan(&i.ID, &i.Name, &i.Active); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const FindSystemPage = `-- name: FindSystemPage :many
SELECT id, name, active FROM "system" WHERE "name" LIKE $1 ORDER BY "name" LIMIT $2 OFFSET $3
`

type FindSystemPageParams struct {
	Name   string `db:"name" json:"name"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

func (q *Queries) FindSystemPage(ctx context.Context, arg *FindSystemPageParams) ([]*System, error) {
	rows, err := q.db.Query(ctx, FindSystemPage, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*System{}
	for rows.Next() {
		var i System
		if err := rows.Scan(&i.ID, &i.Name, &i.Active); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSystem = `-- name: GetSystem :one
SELECT id, name, active FROM "system" WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetSystem(ctx context.Context, id uuid.UUID) (*System, error) {
	row := q.db.QueryRow(ctx, GetSystem, id)
	var i System
	err := row.Scan(&i.ID, &i.Name, &i.Active)
	return &i, err
}

const ListSystem = `-- name: ListSystem :many
SELECT id, name, active FROM "system" ORDER BY "name"
`

func (q *Queries) ListSystem(ctx context.Context) ([]*System, error) {
	rows, err := q.db.Query(ctx, ListSystem)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*System{}
	for rows.Next() {
		var i System
		if err := rows.Scan(&i.ID, &i.Name, &i.Active); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListSystemPage = `-- name: ListSystemPage :many
SELECT id, name, active FROM "system" ORDER BY "name" LIMIT $1 OFFSET $2
`

type ListSystemPageParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListSystemPage(ctx context.Context, arg *ListSystemPageParams) ([]*System, error) {
	rows, err := q.db.Query(ctx, ListSystemPage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*System{}
	for rows.Next() {
		var i System
		if err := rows.Scan(&i.ID, &i.Name, &i.Active); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const NewSystem = `-- name: NewSystem :one
INSERT INTO "system" ("name") VALUES ($1) RETURNING id, name, active
`

func (q *Queries) NewSystem(ctx context.Context, name string) (*System, error) {
	row := q.db.QueryRow(ctx, NewSystem, name)
	var i System
	err := row.Scan(&i.ID, &i.Name, &i.Active)
	return &i, err
}

const UpdateSystem = `-- name: UpdateSystem :one
UPDATE "system" SET "name" = $2, "active" = $3 WHERE "id" = $1 RETURNING id, name, active
`

type UpdateSystemParams struct {
	ID     uuid.UUID `db:"id" json:"id"`
	Name   string    `db:"name" json:"name"`
	Active bool      `db:"active" json:"active"`
}

func (q *Queries) UpdateSystem(ctx context.Context, arg *UpdateSystemParams) (*System, error) {
	row := q.db.QueryRow(ctx, UpdateSystem, arg.ID, arg.Name, arg.Active)
	var i System
	err := row.Scan(&i.ID, &i.Name, &i.Active)
	return &i, err
}
