// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (cpf, name, pass) VALUES ($1, $2, $3) RETURNING id, cpf, name, pass, active
`

type CreateUserParams struct {
	Cpf  string `json:"cpf"`
	Name string `json:"name"`
	Pass string `json:"pass"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Cpf, arg.Name, arg.Pass)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Cpf,
		&i.Name,
		&i.Pass,
		&i.Active,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, cpf, name, pass, active FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Cpf,
		&i.Name,
		&i.Pass,
		&i.Active,
	)
	return i, err
}

const getUserByCPF = `-- name: GetUserByCPF :one
SELECT id, cpf, name, pass, active FROM users WHERE cpf = $1 LIMIT 1
`

func (q *Queries) GetUserByCPF(ctx context.Context, cpf string) (User, error) {
	row := q.queryRow(ctx, q.getUserByCPFStmt, getUserByCPF, cpf)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Cpf,
		&i.Name,
		&i.Pass,
		&i.Active,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, cpf, name, pass, active FROM users ORDER BY id LIMIT $1 OFFSET $2
`

type ListUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]User, error) {
	rows, err := q.query(ctx, q.listUserStmt, listUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Cpf,
			&i.Name,
			&i.Pass,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserActive = `-- name: UpdateUserActive :one
UPDATE users SET active = $2 WHERE id = $1 RETURNING id, cpf, name, pass, active
`

type UpdateUserActiveParams struct {
	ID     int64 `json:"id"`
	Active bool  `json:"active"`
}

func (q *Queries) UpdateUserActive(ctx context.Context, arg UpdateUserActiveParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserActiveStmt, updateUserActive, arg.ID, arg.Active)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Cpf,
		&i.Name,
		&i.Pass,
		&i.Active,
	)
	return i, err
}

const updateUserName = `-- name: UpdateUserName :one
UPDATE users SET name = $2 WHERE id = $1 RETURNING id, cpf, name, pass, active
`

type UpdateUserNameParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserNameStmt, updateUserName, arg.ID, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Cpf,
		&i.Name,
		&i.Pass,
		&i.Active,
	)
	return i, err
}

const updateUserPass = `-- name: UpdateUserPass :one
UPDATE users SET pass = $2 WHERE id = $1 RETURNING id, cpf, name, pass, active
`

type UpdateUserPassParams struct {
	ID   int64  `json:"id"`
	Pass string `json:"pass"`
}

func (q *Queries) UpdateUserPass(ctx context.Context, arg UpdateUserPassParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserPassStmt, updateUserPass, arg.ID, arg.Pass)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Cpf,
		&i.Name,
		&i.Pass,
		&i.Active,
	)
	return i, err
}
